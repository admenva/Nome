/*! nome - v0.0.1 - 2013-11-11
* Copyright (c) 2013 ; Licensed  */
var Emitter=require("./emitter"),extend=require("./extend"),WebSocket=require("ws"),Monome=function(){Emitter.apply(this),this.connected=!1};Monome.prototype=extend(Emitter.prototype,{get connected(){return this._connected},set connected(a){"undefined"==typeof this._connected&&(this._connected=a)},connect:function(a,b){var c;return b=b||"5555",a=a||"127.0.0.1",c=this._websocket=new WebSocket("ws://"+a+":"+b),c.on("open",function(){this._connected=!0,console.log("Connected to Monode server @ "+a+":"+b),this.emit("connected")}.bind(this)),c.on("message",function(a){a=JSON.parse(a),a.event&&this.emit.apply(this,[a.event].concat(a.args))}.bind(this)),this},led:function(a,b,c){this.connected?this._websocket.send(JSON.stringify({method:"led",args:[a,b,c]})):console.warn("led: Not connected to any Monode server")},_websocket:null});var monome=new Monome;monome.connect().on("connected",function(){});var grid={};monome.on("key",function(a,b,c){var d=a+""+b;c&&(console.log("KEY: ",a,b),grid[d]||(grid[d]=0),grid[d]=!grid[d],monome.led(a,b,grid[d]))}),function(a){"use strict";function b(a,b,c){return function(d){return(d.funct===a&&d.scope===b)===c}}function c(a,c,d,e){return a[c]?a[c].some(b(d,e,!0)):!1}function d(){this._listeners={}}d.prototype={listenersCount:function(a){var b=this._listeners[a];return b?b.length:0},on:function(a,b,d){var e=this._listeners;c(e,a,b,d)||(e[a]||(e[a]=[]),e[a].push({funct:b,scope:d}))},off:function(a,c,d){var e=this._listeners[a];e&&(this._listeners[a]=e.filter(b(c,d,!1)))},once:function(a,b,d){c(this._listeners,a,b,d)||this.on(a,function e(){this.off(a,e,this),b.apply(d,arguments)},this)},emit:function(a){var b=this._listeners[a];if(b){var c=Array.prototype.slice.call(arguments,1);b.forEach(function(a){a.funct.apply(a.scope,c)})}}},"undefined"!=typeof module&&module.exports?module.exports=d:"undefined"!=typeof define&&define.amd?define(function(){return d}):a.Emitter=d}(this),function(a){"use strict";function b(){var a={};return Array.prototype.slice.call(arguments,0).forEach(function(b){"function"==typeof b&&(b=b.prototype),Object.keys(b).forEach(function(c){var d=Object.getOwnPropertyDescriptor(b,c);Object.defineProperty(a,c,d)})}),a}"undefined"!=typeof module&&module.exports?module.exports=b:"undefined"!=typeof define&&define.amd?define(function(){return b}):a.extend=b}(this);var port=5555,monode=require("monode")(),WebSocketServer=require("ws").Server,server=new WebSocketServer({port:port}),clients=[];clients.broadcast=function(a){for(var b=this.length;b--;)this[b].send(a)},console.log("Listening on port "+port);var currentDevice=null;monode.on("device",function(a){currentDevice=a,a.on("key",function(b,c,d){clients.broadcast(JSON.stringify({device:a.id,event:"key",args:[b,c,d]}))})}),monode.on("disconnect",function(a){console.log("A device was disconnected:",a),currentDevice=null}),server.on("connection",function(a){clients.push(a),console.log(" + New client on port "+port),a.on("message",function(a){currentDevice&&(a=JSON.parse(a),a.method&&currentDevice[a.method]&&currentDevice[a.method].apply(currentDevice,a.args))})});